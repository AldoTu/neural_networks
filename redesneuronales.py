# -*- coding: utf-8 -*-
"""RedesNeuronales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-pIlEXwHpnGpHJVR1ir53jWigFJnmApv
"""

#Redes neuronales multicapa

import pandas as pd

df = pd.read_csv("winequality-red.csv")
df.head()

df['quality'].unique()

df['quality'] = df['quality'].replace([3,4,5,6,7,8],['Malo','Malo','Regular','Regular','Bueno','Bueno'])
df.head()

X=df.drop('quality', axis=1)
y=df['quality']

X.head()

y.head()

#Redes neuronales y máquinas de soporte vectorial son sensibles a la escala de los parámetros

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X=scaler.fit_transform(X)

#Separar conjunto de entrenamiento y conjunto de prueba
from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.2, random_state=42)

from sklearn.neural_network import MLPClassifier
mlp = MLPClassifier(hidden_layer_sizes=(11,11,11),max_iter=5000,random_state=42)

mlp.fit(X_train,y_train)

#Comparar con los datos de entrenamiento (engañoso)
mlp.score(X_train,y_train)

#Comparar con los datos de prueba (correcto)
mlp.score(X_test,y_test)

#Conocer los parámetros de configuración de la red
mlp.get_params()

#Como mejorar nuestro modelo usando GridSearch
# 'learning_rate_init': [0.01,0.001, 0.005, 0.0001],
# 'solver':['lbfgs', 'sgd', 'adam'],
# 'learning_rate':['constant', 'invscaling', 'adaptive'],
params = {'activation':['identity', 'logistic', 'tanh', 'relu'],          
          'hidden_layer_sizes':[(11,11),(11,11,11),(11,11,11,11),(11,11,11,11,11)]
         }
from sklearn.model_selection import GridSearchCV

grid_search_cv = GridSearchCV(MLPClassifier(max_iter=5000,random_state=42), params, verbose=1,cv=2,n_jobs=8,scoring='accuracy')
grid_search_cv.fit(X_train, y_train)
print(grid_search_cv.best_estimator_)

#Almacenar y evaluar la mejor configuración con el conjunto de entrenamiento (engañoso)
mejor=grid_search_cv.best_estimator_
mejor.score(X_train,y_train)

#Evaluar la mejor configuración con el conjunto de prueba (correcto)
mejor.score(X_test,y_test)

#Otra forma de evaluar la precisión
from sklearn.metrics import accuracy_score
y_pred = grid_search_cv.predict(X_test)
accuracy_score(y_test, y_pred)
#mejor.score(X_test,y_test)

#Obtener la configuración de la mejor red
mejor.get_params()